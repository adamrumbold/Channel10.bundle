API_URL = "http://api.brightcove.com/services/library"
API_PREFIX="http://api.brightcove.com/services/library?command=find_video_by_id&video_id="
#API TOKEN retrieved from: http://code.ten.com.au/video/bc.ten_video.common.1.1.js
API_TOKEN = "lWCaZyhokufjqe7H4TLpXwHSTnNXtqHxyMvoNOsmYA_GRaZ4zcwysw.."
API_COMMAND_SUFFIX = "&page_size=10&none=prevent_web:true&get_item_count=true&media_delivery=http&video_fields=id,name,endDate,renditions,shortDescription,length,tags,thumbnailURL,creationDate,length,FLVURL&custom_fields=tv_channel,tv_show,tv_season,cast,video_type_long_form,video_type_short_form"

def NormalizeURL(url):
	#todo handle media pages that have no ?vid=NNNNNNNNN 
	return url

def MetadataObjectForURL(url):
	Log("Requested metadata object for URL: "+ url)
	# Request the URL
	RE_VID_ID = Regex('vid=([0-9]+)')
	ID = RE_VID_ID.search(url).group(0)
	#using find_video_by_id API	
	mediaURL = API_PREFIX + ID[4:] + "&page_number=0"+ API_COMMAND_SUFFIX + "&token=" + API_TOKEN
	entry = JSON.ObjectFromURL(mediaURL, cacheTime=1800)
	
	# Extract the details available directly form the page.
	show = {}
	show['title'] =         entry['name']
	show['id'] =            entry['id'] 
	show['description'] =   entry['shortDescription']
	show['creationDate'] = int(entry['creationDate'])
	show['creation_date'] = Datetime.FromTimestamp(0) + Datetime.Delta(milliseconds=int(entry['creationDate']))
	show['thumbnail'] =     entry['thumbnailURL']
	show['length'] =        int(entry['length'])
	try:
            show['season'] = int(entry['customFields']['tv_season'])
        except:
            show['season'] = 0
        try:
            show['episode'] = int(Regex('Ep\. (\d+)').search(show['title']).group(1))
        except:
            show['episode'] = 0
	show['playerURL'] = 'http://ten.com.au/watch-tv-episodes-online.htm?vid=' + str(show['id'])
	
	try:
		show['show'] =          entry['customFields']['tv_show']
	except:
		show['show'] = entry['name']
	
	return EpisodeObject(
		show = show['show'],
		title = show['title'],
		season = show['season'],
		absolute_index = show['episode'],
		summary = show['description'],
		originally_available_at = show['creation_date'],
		thumb = show['thumbnail']
	)

def MediaObjectsForURL(url):
	resolution = [180,360]
	MediaObjects = []
	for res in resolution:
		MediaObjects.append(
			MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container =  Container.MP4,
			video_resolution = res,
			parts = [PartObject(key=Callback(PlayVideo, url=url, resolution=res))]	
			)
		)
	
	return MediaObjects
 
def PlayVideo(url, resolution=None):

	# Request the URL
	RE_VID_ID = Regex('vid=([0-9]+)')    
	ID = RE_VID_ID.search(url).group(1)
	Log("Got ID" + str(ID))
	mediaURL = API_PREFIX + ID + "&page_number=0"+ API_COMMAND_SUFFIX + "&token=" + API_TOKEN
	json = JSON.ObjectFromURL(mediaURL, cacheTime=1800)
	playerURL = json['FLVURL']
	maxBitrate = 0
	#play best quality video for now - 
	for rendition in json['renditions']:
		if int(rendition['frameHeight']) == resolution and int(rendition['encodingRate']) >= maxBitrate:
			playerURL = rendition['url']
			maxBitrate = rendition['encodingRate']
			
		
	#use API to actual get direct MP4 URL  
	return Redirect(playerURL)    